<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-01-15T18:57:31-08:00</updated><id>http://localhost:4000/</id><title type="html">neale.github.io</title><subtitle>neale.github.io</subtitle><entry><title type="html">Currently Reading This Week</title><link href="http://localhost:4000/nn/2017/12/28/papers.html" rel="alternate" type="text/html" title="Currently Reading This Week" /><published>2017-12-28T10:40:05-08:00</published><updated>2017-12-28T10:40:05-08:00</updated><id>http://localhost:4000/nn/2017/12/28/papers</id><content type="html" xml:base="http://localhost:4000/nn/2017/12/28/papers.html">&lt;h3 id=&quot;riemannian-metrics-for-neural-networks-i-feed-forward-neural-networks-2015&quot;&gt;Riemannian metrics for neural networks I: Feed Forward Neural Networks (2015)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1303.0818v5.pdf&quot;&gt;arxiv&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;riemannian-metrics-for-neural-networks-ii-recurrent-networks-and-learning-symbolic-data-sequences-2015&quot;&gt;Riemannian metrics for neural networks II: recurrent networks and learning symbolic data sequences (2015)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1306.0514v4.pdf&quot;&gt;arxiv&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;boosting-adversarial-attacks-with-momentum&quot;&gt;Boosting Adversarial Attacks with Momentum&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/1710.06081.pdf&quot;&gt;arxiv&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;deep-image-reconstruction-from-human-brain-activity&quot;&gt;Deep image reconstruction from human brain activity&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.biorxiv.org/content/biorxiv/early/2017/12/28/240317.full.pdf&quot;&gt;biorxiv&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Riemannian metrics for neural networks I: Feed Forward Neural Networks (2015) arxiv</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/true" /></entry><entry><title type="html">Saleincy and Structue of Adversarial Perturbations</title><link href="http://localhost:4000/nn/2017/11/13/saliency.html" rel="alternate" type="text/html" title="Saleincy and Structue of Adversarial Perturbations" /><published>2017-11-13T15:25:05-08:00</published><updated>2017-11-13T15:25:05-08:00</updated><id>http://localhost:4000/nn/2017/11/13/saliency</id><content type="html" xml:base="http://localhost:4000/nn/2017/11/13/saliency.html">&lt;p&gt;Day to day I’m simultaneously impressed and annoyed at the degree of entanglement between real and adversarial features in images. This entanglement problem seems to be the root of the recovery problem. We can’t just run small blurring filters over all inputs, because the adversarial signals are so tightly coupled with the real signals. Destory one and you destory everything.&lt;/p&gt;</content><author><name></name></author><summary type="html">Day to day I’m simultaneously impressed and annoyed at the degree of entanglement between real and adversarial features in images. This entanglement problem seems to be the root of the recovery problem. We can’t just run small blurring filters over all inputs, because the adversarial signals are so tightly coupled with the real signals. Destory one and you destory everything.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/true" /></entry><entry><title type="html">Removing One-Step Adversarial Perturbations with Bilateral Filtering</title><link href="http://localhost:4000/nn/2017/07/23/onestep.html" rel="alternate" type="text/html" title="Removing One-Step Adversarial Perturbations with Bilateral Filtering" /><published>2017-07-23T16:25:05-07:00</published><updated>2017-07-23T16:25:05-07:00</updated><id>http://localhost:4000/nn/2017/07/23/onestep</id><content type="html" xml:base="http://localhost:4000/nn/2017/07/23/onestep.html">&lt;p&gt;I don’t think its escaped anyone that the state of the art of adversarial attacks completely outstrips the state of the art for defenses. 
All defenses including defensive distillation, logit classification a la. SafetyNet, and other statistical methods are currently broken. 
Mostly, these defenses fall to optimization based adversarial attacks, because the current way we do things in machine learning and computer vision is invariably to train a classifier.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\textbf{y} = \mathit{overfit}(\textbf{x})&lt;/script&gt;

&lt;p&gt;In the context of adversarial attacks, training regimes invaribly create fully exploitable models. 
The CW attacks are all optimization based attacks, which are very much standard now. Optimization based attacks such as CW, the L-BFGS attack, and the Jacobian Based Saliency Map attack are far more effective at creating adversarial attacks than so called one-step attacks.
Most optimization attacks work by taking some image &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; with some label &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt;, and repeatly minimizing some objective s.t. some norm to get a similar image &lt;script type=&quot;math/tex&quot;&gt;x'&lt;/script&gt; with a different label &lt;script type=&quot;math/tex&quot;&gt;y'&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This is in contrast to one-step methods, which constructs the adversarial perturbation in a single go. 
The common example is the Fast Gradient Sign Method, which adds a perturbation &lt;script type=&quot;math/tex&quot;&gt;\eta&lt;/script&gt; in the direction of the incorrect class.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\eta = \textit{sign}(\nabla_x H(x, y'))&lt;/script&gt;

&lt;p&gt;Where &lt;script type=&quot;math/tex&quot;&gt;\textit{H(x, y')}&lt;/script&gt; is the cross entropy loss w.r.t an image and an incorrect label.
Adversarial examples can be created quickly using only a single gradient computation.&lt;/p&gt;

&lt;p&gt;Compare this to some of the different objective functions of iterative methods, using the same notation as above. &lt;script type=&quot;math/tex&quot;&gt;Z&lt;/script&gt; here refers to the network logits, i.e. the input of the softmax layer,&lt;/p&gt;

&lt;h5 id=&quot;l-bfgs&quot;&gt;L-BFGS&lt;/h5&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\min c || x - x' ||^{2}_{2} + H(x')&lt;/script&gt;

&lt;h5 id=&quot;cw-l_2&quot;&gt;CW (&lt;script type=&quot;math/tex&quot;&gt;L_2&lt;/script&gt;)&lt;/h5&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\min ||\eta - x||^2_2 + c f(\eta)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\textit{where} \quad f(x') = \max(Z(x')_i - Z(x')_{y'}) \quad 
\textit{such that} \quad i \neq y'&lt;/script&gt;

&lt;p&gt;I’ve simplified the above equations; removing the box constraints and the CW change of variables for readability. 
But the point is that we can choose a metric, and can optimize against our network to create effective adversarial examples with minimal distortion.&lt;/p&gt;

&lt;div class=&quot;post-img&quot;&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img class=&quot;img-responsive img-post&quot; src=&quot; /assets/images/snake-adv-comp.svg&quot; align=&quot;middle&quot; width=&quot;90%&quot; height=&quot;90%&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Given the above difference, the rationale behind one-step attacks seems suspect. Why bother with them at all if optimization based methods are so superior that the magnitude of the (normalized) perturbation is less than 1 across a &lt;script type=&quot;math/tex&quot;&gt;(299 x 299)&lt;/script&gt; image.&lt;/p&gt;

&lt;h4 id=&quot;transferability&quot;&gt;Transferability&lt;/h4&gt;

&lt;p&gt;Since iterative attacks optimize against a single network, the generated adversarial examples often do not work well against other networks. 
Different network architectures trained with gradient descent yield different local minima in parameter space, and an optimized adversarial example will not generalize well to a different architecture. 
It seems that adversarial examples can overfit just like networks can.&lt;/p&gt;

&lt;p&gt;One-step methods often &lt;a href=&quot;https://arxiv.org/abs/1705.07204&quot;&gt;generalize better&lt;/a&gt; than iterative methods, which leads to a single set of adversarial examples being a vulnerability for any network trained on the same dataset. 
This is far less effort for bad actors than optimizing against all networks and guessing which ones are deployed in the field.&lt;/p&gt;

&lt;h4 id=&quot;one-step-methods-are-a-simple-viable-threat-vector-against-deployed-ml-systems&quot;&gt;One-step methods are a simple, viable threat vector against deployed ML systems&lt;/h4&gt;

&lt;p&gt;If you deploy machine learning systems at any scale, you should consider the threat of adversarial inputs. 
If you have a highly tuned model architecture that you’re sure nobody else can deduce, then you might be safe from &lt;em&gt;some&lt;/em&gt; well-optimized adversarial attacks. However one-step examples are cheap to create and can generalize across architectures.&lt;/p&gt;</content><author><name></name></author><summary type="html">I don’t think its escaped anyone that the state of the art of adversarial attacks completely outstrips the state of the art for defenses. All defenses including defensive distillation, logit classification a la. SafetyNet, and other statistical methods are currently broken. Mostly, these defenses fall to optimization based adversarial attacks, because the current way we do things in machine learning and computer vision is invariably to train a classifier.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/true" /></entry><entry><title type="html">Breaking Defensive Distillation with L-BFGS</title><link href="http://localhost:4000/nn/2017/05/12/distillation.html" rel="alternate" type="text/html" title="Breaking Defensive Distillation with L-BFGS" /><published>2017-05-12T16:25:05-07:00</published><updated>2017-05-12T16:25:05-07:00</updated><id>http://localhost:4000/nn/2017/05/12/distillation</id><content type="html" xml:base="http://localhost:4000/nn/2017/05/12/distillation.html">&lt;p&gt;Defensive distillation was a good idea: the authors basically fuzz the gradients of the network by training a second smaller network on the softmax outputs of the original network.&lt;/p&gt;

&lt;p&gt;So that a training sample of the second network has a distribution of &lt;script type=&quot;math/tex&quot;&gt;\textit{soft labels}&lt;/script&gt; assigned as the label, instead of a single hard label where &lt;script type=&quot;math/tex&quot;&gt;\hat{y} = \textit{argmax}(f(x))&lt;/script&gt;. This increases the number of features that need to be changed by an adversarial attack, in order to change the output label. That’s a high level overview, I recommend the actual paper &lt;a href=&quot;https://arxiv.org/pdf/1511.04508.pdf&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This worked pretty well at first, until it was broken by &lt;a href=&quot;https://arxiv.org/pdf/1607.04311.pdf&quot;&gt;Carlini and Wagner&lt;/a&gt; with an iterative method that targets logits instead of the softmax output. 
Distillation relies heavily on the temperature of the primary network in order to train the distillation net. 
Which controls the distribution of soft labels that each example is assigned. 
Recap: a softmax output creates a &lt;script type=&quot;math/tex&quot;&gt;[0, 1]&lt;/script&gt; normalized distribution from the incoming logits.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;F(y = \textit{softmax}(Z(\theta, x) / T)&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\textit{softmax}() = \frac{e^{zj}}{\sum_{k} e^{z_k}}&lt;/script&gt;

&lt;p&gt;Where the temperature &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; controls the shape of the output distribtion. 
When &lt;script type=&quot;math/tex&quot;&gt;T \rightarrow \infty&lt;/script&gt; the output becomes uniform, when &lt;script type=&quot;math/tex&quot;&gt;T \rightarrow 0&lt;/script&gt; the distribution become unimodal.&lt;/p&gt;</content><author><name></name></author><summary type="html">Defensive distillation was a good idea: the authors basically fuzz the gradients of the network by training a second smaller network on the softmax outputs of the original network.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/true" /></entry><entry><title type="html">Generating code with character level RNNs</title><link href="http://localhost:4000/nn/2015/08/12/source.html" rel="alternate" type="text/html" title="Generating code with character level RNNs " /><published>2015-08-12T16:25:05-07:00</published><updated>2015-08-12T16:25:05-07:00</updated><id>http://localhost:4000/nn/2015/08/12/source</id><content type="html" xml:base="http://localhost:4000/nn/2015/08/12/source.html">&lt;!--To start off this **Blog** I thought I would give a history of where Ive been on my short ourney so for, starting with my first encounter with a neural net. A year or so ago I came across an npm package called Synaptic which gives some functions for defining the behavior of artificial neurons.--&gt;

&lt;p&gt;Well I said I was going to source code with my character RNN and last weekend I did just that. I grabbed the largest open source programs I could find. 
Obviously I took the linux kernel, and then I thought it would be interesting to see what a neural network thought of itself. So I concatonated the Torch source 
that’s on Github and sent it through the LSTM. The last thing I did was take all of my code, every last piece of it that’s on Github and tried to see what an RNN 
thinks of my code. Mostly I was sure that the Linux and Torch sources were going to give much cleaner representations of code than my own source will.&lt;/p&gt;

&lt;h2 id=&quot;linux-source-code&quot;&gt;Linux Source Code&lt;/h2&gt;

&lt;p&gt;Without further delay, I downloaded the Linux source from &lt;a href=&quot;https://github.com/torvalds/linux&quot;&gt;Github&lt;/a&gt; as a frustratingly large repository of 1.5GB&lt;/p&gt;

&lt;p&gt;In order to cat all the files into one disgustingly long file I ran a simple bash line&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find linux/ &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'*c'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-exec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ../linux.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This file was a lot larger than the C.S. Lewis corpus, at 541MB and needed 50 days to train with a 6 layer LSTM. I didn’t want to wait that long so I cut the file down to 50MB and trained it from there. Here is some of the sampled code it generated. 
This time I’m going to cherry pick the results because I think that’s more interesting. We already know these models aren’t perfect.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq_file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;omap2_current_clkdm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;root[-32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;traps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vcpu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gpio_cap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ia64_execution_setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_apply_vddump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config_r_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;omap3_ll_core_red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__omap1_code_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;pci_dir_dt_map_partte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pxa27x_pxa_reset_interrupts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ARMV7_PERFCTR_TC_INTLM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MFP_FAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXP_OFFSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IS_CALL_AT_P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IO_ADDRESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ETRAX_PM_CONTROL_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SMART_DAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SMART_DAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SMART_CMD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SMART_CMD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CLK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VAL1_9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s a whole lot of learning take place, from just characters the LSTM has learned to generate code that with a little work, could compile. 
This code could probably fool most undergraduate TAs into thinking the student did some work. Althrough if the student was generating their code with an LSTM, 
they probably deserve a decent grade.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;platform_driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pmu_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* MIPS of support */&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;power_map_arch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;NUM_UHAX_DEVID_BASE_END&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__stackpoint_idtop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* Wree test counter uses for range to configure RESH, input */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edit_tables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cpu_none&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jab_boot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;qeat_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ia32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__pstate_thread_flag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dma_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pr_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s: */&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pe_current_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_cache_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ncriss_reading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__flush_icache_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;highol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etbys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;__raw_writel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;spin_lock_irqsave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;xcmp_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I saved the best for last, this was the best piece of code that the network generated in my 5000 character sample. In this one function, it uses &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt;, 
single line if statements, &lt;strong&gt;struct&lt;/strong&gt; and &lt;strong&gt;&amp;amp;struct-&amp;gt;&lt;/strong&gt;, and functions that take none to many arguments.&lt;/p&gt;

&lt;p&gt;C is a very structured lanuage, so there were larger, more obvoius features for the RNN to pick out which I think helped its training. 
Higher level languages would have more trouble since the interpreter does so much of the heavy lifting. That sounds like a challenge, so lets not just tackle another language. 
We’re going to generate code from the same RNN, trained on a deep learning framework.&lt;/p&gt;

&lt;h2 id=&quot;torch-framework-generation&quot;&gt;Torch Framework Generation&lt;/h2&gt;

&lt;p&gt;I was really excited for this, I wanted to see how a neural network would write scientific code. Torch is a smaller dataset than the Linux source, so I added the cudnn and rnn library sources.
I’m really considering adding in more Torch code from other repositories just to boster the dataset. But I can’t control how valid someone else’s Torch code is so that seems more likely to contaminate the dataset then help it. I still might do it.&lt;/p&gt;

&lt;p&gt;The methodology here is much the same, I downloaded the source from &lt;a href=&quot;https://github.com/torch/torch7&quot;&gt;Github&lt;/a&gt; and catted the whole thing with the above command.
The resulting text file was ~2MB so I figured it was good to go. Here’s some of the generated source, this is how a neural net would build itself.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LSTM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;set &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recursiveCopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;-- get the it  convertis sequencen the input to return and (targets through forward for layers&lt;/span&gt;
   
   &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;-- Uoth initialModule&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkSums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localSumh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gradOutput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initialModule&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LongStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rho&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nStep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'both'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bwdSeq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;LSTM writing a LSTM.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It even has the commments right, but they’re a little funky since the network doesn’t have any language reference, just source code. 
So all it knows how to talk about is networks, which wors fine for this demo.&lt;/p&gt;

&lt;p&gt;I was particularly impressed by this bit, it closes parentheses well and it even got the dot operator right.&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nb&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkSums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localSumh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gradOutput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initialModule&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LongStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rho&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nStep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'both'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is totally reasonbable lua code that only doesn’t work if you look really close. This really speaks to the quality of code that makes up Torch.
The generated text would be way more convoluted if the source wasn’t consistant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeroTensor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recurrentModule&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gradOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gradOutput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nStep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;seq2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_gradInputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputsize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gradOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/true" /></entry><entry><title type="html">Narnia With Character Level Recurrant Neural Networks</title><link href="http://localhost:4000/nn/2015/01/12/Lewis.html" rel="alternate" type="text/html" title="Narnia With Character Level Recurrant Neural Networks" /><published>2015-01-12T15:25:05-08:00</published><updated>2015-01-12T15:25:05-08:00</updated><id>http://localhost:4000/nn/2015/01/12/Lewis</id><content type="html" xml:base="http://localhost:4000/nn/2015/01/12/Lewis.html">&lt;!-- neurons --&gt;

&lt;p&gt;Playing with Recurrant Neural Networks is one of those hobbies that really reminds me how powerful these models can be. 
Every since I read Andrej Karpathy’s blog &lt;a href=&quot;http://karpathy.github.io/2015/05/21/rnn-effectiveness/&quot;&gt;post&lt;/a&gt; on the absurd power of RNNs
I wanted to try them on my own data. RNNs look more intimidating than other neural network architectures because they unravel data in time and have connections everywhere and exploding gradients. 
That seems scary and difficult, I remember how hard it was to tune my first net to do anything interesting, and have been avoiding RNNs for a long time. 
But their potential to do amazing tasks is enticing, I just need to sit down and figure it out. Deep learning can be hard to interest people who might not otherwise have the inclination.
It would be nice to show a machine learning demo that’s better than drawing a better linear seperator than an SVM, or showing object recognition on an image. I want an RNN.
RNNs can learn how caption videos, generate music, or learn to speak. They can also be used to generate images in a crazy hallucination that only a neural net 
could come up with.&lt;/p&gt;

&lt;h2 id=&quot;the-inside-of-an-rnn&quot;&gt;The Inside of an RNN&lt;/h2&gt;

&lt;p&gt;Recurrant Neural Networks look more like the goal of AI than a standard neural net, if the goal is a larger, more sentient unit. Vanilla feed forward neural networks can take an input, apply a learned function, 
and produce a fixed output. So regular neural networks can look at data and reason about it, but really only in some constrained way that’s limited by their training scheme. 
The data has no spatial or temporal correlation and the network blindly produces an output. Convolutional Neural Networks were an effort to fix the lack of spatial reasoning 
with respect to images and neural networks. CNNs were made to have invariance to spatial tranformations because networks need to actually work in practice.  RNNs then are a way to encode temporal information into a 
neural network. The goal of an RNN is to take sequences of data and model it data as a distribution with respect to time. This puts RNNs in a whole different class of network called a generative model. Generative models can create new information, 
while vanilla nets only exist to answer a heavily formulated and constrained question.&lt;/p&gt;

&lt;div class=&quot;post-img&quot;&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img class=&quot;img-responsive img-post&quot; src=&quot; /assets/images/RNN_basic.png &quot; align=&quot;middle&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Here each unit is an arbitrary basis function, it can be a ReLU, tanh, or anything else. But the main interest is that there are arrows connecting previous layers in the sequence, to layers that come later.
Each wtx+b (connection) computation is a vector of fixed size and is preformed over t timesteps (where t is the number of layers in the RNN) for each neuron. Given this history, the 
RNN can not only reason about its current input like a regular feed forward neural net does, but it can look back t timesteps with t gradient signals, at the data that preceded the current input
and use that data to more effectively train a generator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It gets better, RNNs are so powerful that they can operate on any data and draw out a better representation than other machine learning methods on tasks that require memory. They can develop a 
broader view, or rather contextualize their input by remembering past states of data. Really by feeding sequences into RNNs, you’re giving a neural network different states of some larger program, 
and the job of the RNN is to generate a new state.  If you were to give an image to an RNN as a sequence of pixels, then the RNN could generate new states for the image 
for every time step. If RNNs take an input, and produce a new state, than they are in fact generating programs. RNNs are &lt;a href=&quot;https://arxiv.org/pdf/1410.5401.pdf&quot;&gt;turing complete&lt;/a&gt; 
and can be generalized to form Neural Turing Machines, which build internal states, given an input and output. In other words, given an input and the transformed output, 
a Neural Turing Machine (RNN) can develop the black boxed algorithm that transformes the input state to the output state. Here’s a look at what a Neural Turing Machine looks like.&lt;/p&gt;

&lt;div class=&quot;post-img&quot;&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img class=&quot;img-responsive img-post&quot; src=&quot; /assets/images/NTM.png &quot; align=&quot;middle&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;wat&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With all this in mind. There’s a great open source community based around getting these models up and running in real life. Turnaround from research paper to open source implementation 
is pretty quick these days. As you know, I prefer Torch for pretty much everything. Now Torch isn’t great for RNNs, but I don’t want to use Theano and Lua is pretty friendy for hacking 
together computational kernels for Torch. I have a lot of things I want to make RNNs do, but with the release of a &lt;a href=&quot;http://arxiv.org/abs/1508.06576&quot;&gt;convnet approach to copying painting styles&lt;/a&gt; 
I thought it would be really interesting to teach an RNN to speak english in the style of one of my favorite authors. My desktop is busted so I’ll be training it on an M5 mobile 
processor, but it should work anyway. RNNs don’t need to be as deep as the more interesting CNN architectures (I’m looking at you ResNet), I’d never finish anything 
with a 200 layer RNN. So that’s the task, in Torch we want to create an RNN that can learn to speak like C.S. Lewis.&lt;/p&gt;

&lt;h2 id=&quot;lstms&quot;&gt;LSTMs&lt;/h2&gt;

&lt;p&gt;So lets start building a network. We’re going to work with the standard assumption that deep = good. We’re going to use torch to stack layers of an RNN in order learn a 
complicated representation of our input-output mapping, or just call it function approximation. And going to train with backprop to optimize a convex error function. 
At the end were going to generate probabilities and pick the likely candidate from the distribution. This all sound standard and boring? Great, now lets start getting weird. 
We’re not going to use a Vanilla RNN, because in practice they don’t preform as well as other architectures. The most common flavor of RNN that’s used in practice is called an LSTM, 
for long short term memory. Its named so because the nodes in an LSTM aren’t just mappings to an activation, but instead are their own network of gates and cells. This allows a 
greater measure of control over the memory of the RNN.&lt;/p&gt;

&lt;div class=&quot;post-img&quot;&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img class=&quot;img-responsive img-post&quot; src=&quot; /assets/images/LSTM.png &quot; align=&quot;middle&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;These diagrams are notoriously unintuitive. But the basic idea is that for each of these cells, there is an associated parameter in the network that is learned. 
The network will learn when to store more information, when to forget (zero the cell), and what operations to preform on the data before the output.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The only other thing to note is the sigmoid units before each product, this just prevents the gradients from blowing up, which is a common problem with RNNs and is the motivation behind LSTMs. 
I should actually just talk about it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;gradient-explosion-and-vanishing&quot;&gt;Gradient Explosion and Vanishing&lt;/h2&gt;

&lt;p&gt;RNNs are not a new concept, they were first formulated back in the 1980s, with portions of it drawn from older boltzman machines, and others from the even older STM equation 
which describes the application of memory cells, but none of that really matters because RNNs are here and they work. But they didn’t always, RNN’s were rarely used up until a few 
years ago because they were so difficult to train. As with regular neural nets, if you can stabilize the gradients and keep them from saturating, then you can effectively use backprop to 
find a minima of your manifold and train your network. The problem was that this just wasn’t happening with recurrent nets, and the reason was because of backpropogation.&lt;/p&gt;

&lt;div class=&quot;post-img&quot;&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img class=&quot;img-responsive img-post&quot; src=&quot; /assets/images/backpass.png.png &quot; align=&quot;middle&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;The backward pass through a network, you will accumulate all the gradients dz, and sum them for each layer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;post-img&quot;&gt;
&lt;p align=&quot;center&quot;&gt;
&lt;img class=&quot;img-responsive img-post&quot; src=&quot; /assets/images/backprop_eq.gif &quot; align=&quot;middle&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;The chain rule representation of the backward pass of backpropogation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;During backpropogation you’re accumulating all these gradients at each layer, and you are applying them to a basis function like a ReLU and praying 
that your neurons don’t die. If you do this accumulation with a simple feed forward model, then you just have summed gradients i.e. standard backprop, and there is no issue
as long as you regularize and use an good basis function. The difference in recurrent nets is that you are multiplying derivitives through multiple time steps 
at each layer. So you can think about it in this exponential framework where if you have a recurrent net and you’re looking back 100 time steps, then you’re going to be 
multiplying 100 derivitives before you can pass the input to an acivation unit. If your gradients are greater than 1, the signal explodes to infinity, if they’re less than 1, 
then the gradient goes to 0 and the cell dies. This is why people had so much trouble training RNNs with regular backprop. The signals weren’t propogating useful 
information and the memory structure wasn’t useful in practice. There were dead neurons everywhere, or the model would never converge. It was 1970 all over again with bad initialization schemes and malfunctioning nets.&lt;/p&gt;

&lt;p&gt;This is why people started using gating, so the gradient signal could be effectively controlled as the network learned more and more parameters further back in time. 
If you have memory, you need to be intelligent about your storage scheme, just like in a computer, or in the brain. Gating is just element wise multiplication with some scaler to modilfy the input once its been through a logit unit.
In order to implement an LSTM, its good to realize that an LSTM cell is just a few linear layers and some tanh layers that multiply scalers by the input.&lt;/p&gt;

&lt;p&gt;This is an LSTM cell in Torch, which is far simpler than the diagram makes it look.&lt;/p&gt;

&lt;p&gt;We’ll be defining a simple LSTM cell that ca be stacked as a unit, in layers that are n cells wide&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;-- define a computation graph with nngraph  &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev_c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev_h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()())&lt;/span&gt;  
&lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()())&lt;/span&gt;  
&lt;span class=&quot;nb&quot;&gt;table.insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()())&lt;/span&gt;  

&lt;span class=&quot;c1&quot;&gt;-- define layer-wise connections &lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_to_hidden&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rnn_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hidden_to_hidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rnn_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rnn_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev_h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signals&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAddTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_to_hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hidden_to_hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;We just defined the input table, which will store our input data, and the connections that regulate dataflow in the graph.
Remember that rnn_size is the width of our network and is used to define how layers are connected.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;From tables, we’re going to be interting tensors right into the LSTM input, and defining the gates with activations&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- input gate&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_signal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Narrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rnn_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rnn_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_gate&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tanh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- other gates&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Narrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rnn_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;squash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tanh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now for the gate definitions themselves.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_g&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Narrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rnn_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forget_g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Narrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rnn_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rnn_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Narrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rnn_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rnn_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The gradients have been secured, and the gates have been defined. We need to add the computations to the table so that we can make them apart of the pipeline.
It will just take another call to &lt;code class=&quot;highlighter-rouge&quot;&gt;nn.CAddTable&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;nn.CMulTable&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_input&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMulTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- input cell gate state&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_forget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMulTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_gate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- forget cell gate state&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_c&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAddTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()({&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;c_forget&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Next just get the output of the LSTM cell by multiplying by tanh and the output table&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_out&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tanh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CMulTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s it. We have defined an LSTM cell that we can replicate in as many layers as we want and train it with backpropogation.&lt;/p&gt;

&lt;h2 id=&quot;training-on-narnia&quot;&gt;Training on Narnia&lt;/h2&gt;

&lt;p&gt;It took a long time but I managed to find and concatonate the entire published works of C.S. Lewis into a single file and loaded it into the LSTM one character at a time. 
The whole file was just shy of 3MB, too small to be very useful, but I figured I’d learn something interesting. So I trained it for a day or so on my M5 laptop and here’s 
an excerpt when I sampled it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One stormy night perfectly swelling disappeared, and then they found he himself felt a very touch for his ear. And then she had got the person on both chest he remoined in a red
green standing up to his head broke in the air of that. Then he was blowing noises. What
he was Polly and great difficulty: and then he appeared to be quite as explorable faming like frove more changed.
He began looked during his morning in the sea, there was some of them all had been beyond that when he was saying so hnau. They went altogether in his eyes when he had carrier an
with in my opening powerfalls in the thing in the first bird in the warm mind, bowed and sometimes made them all open to the beautiful feet of Malacandra. The Man lived as he cam
call a tree in the end. And the reflecting particial bright conversation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;In a tree so fine, but the words he would have taken it on the very finest, but for him whole world and be knowed by old Tisroc’s name. 
But the slipper of stopping it, rabbit home he the secret glorious lion had afterway and has forced upon theology. No bigger phase it must still be true-if.
What shall - “How, go on.”
“Hear of my arm moved,” began Devine.
“I’m glad so you first,” said Ransom.
But which was hoping. Their first noise under has readdrist with a marble and threw. Or courage for he worked their trees.
He gave grey unpretent to say they had all already thrown it on one anoposity of very free-less wonderfully. To say which please of course he have had as well as the goldey of wings and some superour whose not a
drink of thinking, “If they’d be ade enforalisorshight,” whispered Christianity-and the garden (not to be brother,
and so this would be surprised
Now discovery than this becton parties will give to get round to wider evil also you lost it because God
and forced  it, the lighting of a nice bringing images to be cried. You shape offered by an offing to God. You mistake God is it now?&lt;br /&gt;
Now had gone about you are going on, sorry man&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I didn’t cherry pick those examples or clean up the outputs. You can see some inconsistances in its learning. Clearly it hadn’t quite converged, and the training 
data wasn’t extensive enough. Obviously we have some creativity with Ransom and Devine having a conversation, as they would in the space trilogy.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Hear of my arm moved,” began Devine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I’m glad so you first,” said Ransom.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even though there is no central context happening here, you can see that from characters, the RNN has learned about grammer rules.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Spaces after periods.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Commas between thoughts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How to open and close quotation marks&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Starting sentences with capital letters&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For some context, here is a sample of the RNN early on in the training process&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;lucyelhvaiseibaup ta  lric ruit ce  in moennlt io -erm”oe ar We”apte Atddse
sa r t ewen la  ,hoi hmouh  ptan  S ot pst fetiohyrYtInsirB ‘ tgea  olot id lao ae . h aefeawene  er ci hpiilyelea.n
 e uiln,hs deoAsaoo Deth,t ekmia cg lmm tncenrAigp oeu
 y
eeutn yeeoinwtbnh iw rai “rpeyrb ehenig  t,t h  twlk  e dnehao to hseaya aal  dt lah n
y   vmehctls og fs e ftne rrnmmneqokmnt ,u.wbauhwtk nmrtegrrgsD ylnIebnewtlreoPnnninmyeeltto dewdttnnhnHanb ga  dai  ecwwdhIleao   rat eeoc “gd.ht o teunrheoct,el e.aconaur d   c aavb .eodsrutiu tccetttw cPdoeO drvvh de nlt edehopi
endo, n l dsgttpe  v sr n…asu asoor, ki eviMh I ybam ea “a c at eo)- o aaqi p t at’a e kluutdwi jblbr “fn.d  nHesprremeunt rl on tacin wesia dndly gaosnthdmf  serl gthatt at haln”srosah”irgdtnphe r htor Ilh.etheoaepyd.nhahc aai,dd  rhae  nho re hhmstym , ohd tu w  Usrel.eetTfhbSe p aotnahndeo hecrlomctnste1 w tow ?mie h  fp  . t ecmtgt’ trsoh eoenryeoreooiince  sa e rNlehoswno fhon kaCc eer  denasot noaesc  .masncawhsh&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  egh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The RNN has a mastery of English, even if it doesn’t have any coherant thoughts. I hope this has inspired you to build an RNN of your own and make robots generate cool 
things. I want to try music and source code next, and I really want to check out neural turing machines more.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/true" /></entry></feed>